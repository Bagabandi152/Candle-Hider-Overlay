// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © mortdiggiddy 

//@version=5
indicator("Candle Plot Hider 3B - V1 - MN", max_lines_count = 500, max_labels_count = 500, max_boxes_count = 500, max_bars_back = 300, overlay = true)

// SETUP

candleType = input.string("Candlestick", "Candle Type", group = "Setup", options = ["Candlestick", "Heikin Ashi", "Candlestick - HA Hybrid"]) 
dintval = input.string("60", "Candle Interval", group = "Setup", tooltip = "The interval/timeframe of the candle, 5, 15, 60, 240, D, W, M, etc. Use a minute value when choosing hourly intervals, such as 240 to represent an H4 candle.")

// var pctRankTip = "The rank is calculated using the following process: Calculate the average volume and standard deviation over the previous N candles. Set a lower bound volume value to be \n\n➡️ volLower = volAvg - 0.35 * volStdev\n\nSet an upper bound volume value to be \n\n➡️ volUpper = volAvg + 3 * volStdev\n\nFor normally distributed data, 68% of values fall between ±1 standard deviations of the mean, 95% of values fall between ±2 standard deviations of the mean, and 99.7% of values fall between ±3 standard deviations of the mean.\n\nForm the volume rank of a current candle by\n\n➡️ volRange = volUpper - volLower\n➡️ rank = (volume - volLower) / volRange x 100\n\nFurther modify this result using a ceiling and floor operation to force the value between 0 and 100 if the value exceeds these boundaries\n\n✅ rankMod = ceil(floor(rank, 100), 0)"       
var pctRankTip2 = "\n\nFor normally distributed data, 68% of values fall between ±1 standard deviations of the mean, 95% of values fall between ±2 standard deviations of the mean, and 99.7% of values fall between ±3 standard deviations of the mean."

shadeVolume = input(false, "Shade Candles By Volume Rank?", group = "Volume", tooltip = "Shade the background of each candle based on the its relative volume compared to the previous N candles based on a percentile rank with values between 0 - 100.\n\nA candle with a lower rank will appear more transparent. A candle with a higher rank will appear more opaque.")
showRankLabels = input(true, "Show Rank labels?", group = "Volume", tooltip = "Hovering over the middle of a candle's body will show some meta information about the candle. Checking this option will visibly overlay the volume rank value over the candle body. Disabling this option will hide the percentile rank value, however hovering over the center of the candle body will still show the tooltip candle information.")
minimalText = input(true, "Minimalist Volume Labels", group = "Volume", tooltip = "Valid when the 'Show Volume Percentile Labels' is checked. Fade out the volume text labels to fully transparent as the rank approaches zero. Fade in the the volume text labels to fully opaque as the rank approaches 100.\n\nIf this box is unchecked, all volume text labels will remain fully opaque.")

rankMode = input.string("Percentile", "Rank Mode", options = ["Percentile", "Distribution"], group = "Volume", tooltip = "Percentile: Shade the background of each candle based on the its relative volume compared to the previous N candles based on a percentile rank with values between 0 - 100. The current candle is not included in the comparison to the previous candles (exclusive). See the 'Sigma' input parameter information to know more.\n\nDistribution: Use the cumulative sum of buy volume and sell volume inside the candle to form a buy/sell rank form 0 - 100. A rank of 0 means all internal volume of the candle opposes the direction of the candle, a rank of 100 means all internal volume of the candle was in the direction of the candle. The direction of the candle is up or down, corresponding to a candle with a bullish close > open or bearish close < open, respectively.")

volLookback = input.int(50, "Volume Period Lookback", group = "Volume", minval = 1, tooltip = "Used when the 'Shade Candles By Volume Rank' option is checked. The number of candles, N, to include in the relative volume profile.\n\nNo effect when using 'Distribution' rank mode.")
sigma = input.float(3.0, "Rank Sigma", group = "Volume", minval = 0.1, tooltip = "Used only for 'Percentile Rank' candles with then 'Shade Candles By Volume Rank' option is checked. This value represents the number of standard deviations that the current candle volume must exceed in order to be considered a 100 rank candle. Candles with a 100 rank are shaded with 100% opacity. Candles with a rank between 0 - 100 (or candles with a volume that is beneath the standard deviation boundary) will have a non-linear opacity of 0 - 100 applied." + pctRankTip2)
textSize = input.string("Small", "Volume Percentile Label Size", group = "Volume", options = ["Tiny", "Small", "Normal", "Large", "Huge"])

secondColorUp = input.color(#E0FFE0E0, "Secondary Text Colors", inline = "second", group = "Volume")
secondColorDn = input.color(#FFE0E0E0, "", group = "Volume", inline = "second", tooltip = "If the 'Show Volume Percentile Labels' visibility option is checked, the secondary colors are used as ingredients to form the percentile rank label color over the candle.\n\nAs the rank approaches 100, the text color will approach this bullish or bearish secondary, depending on the candle direction. This is necessary so that the text color does not blend in with the background color of the candle body.")
// MISC

upColor = input.color(#02A0AEFF, "Bullish Border", group = "Color", inline = "bullish")
fillColorUp = input.color(#02A0AE4C, "Bullish Fill", group = "Color", inline = "bullish")
dnColor = input.color(#C000C0FF, "Bearish Border", group = "Color", inline = "bearish")
fillColorDn = input.color(#C000C04C, "Bearish Fill", group = "Color", inline = "bearish")

wickColorUp = input.color(#02A0AEFF, "Wick Color", group = "Color", inline = "wick")
wickColorDn = input.color(#C000C0FF, "", group = "Color", inline = "wick")
wickColor = input.color(#707070FF, "", group = "Color", inline = "wick", tooltip = "Wick colors for bullish candles, bearish candles, and candles where the open = close (doji).")

candleWidth = input.int(1, "Candle Border Thickness (1 - 5)", group = "Miscellaneous", minval = 1, maxval = 5)
wickWidth = input.int(2, "Wick Thickness (1 - 5)", group = "Miscellaneous", minval = 1, maxval = 5)

showWick = input(true, "Show Wicks?", group = "Miscellaneous")
showCountdown = input(true, "Show Countdown?", group = "Miscellaneous", tooltip = "Show a countdown label near the current candle that displays the time remaining until the next interval.")
countdownOffset = input.int(0, "Countdown Label Offset", minval = 0, tooltip = "The offset in number of candles to the right of the current candle.")
countdownOnly = input(false, "Show Countdown Only?", group = "Miscellaneous")

var topFillUp = color.new(fillColorUp, 0)
var topFillDn = color.new(fillColorDn, 0)

var hybrid = candleType ==  "Candlestick - HA Hybrid"

// GLOBAL

bar = -1
bar := nz(bar[1]) + 1

dT = time - time[1]
dT := math.min(nz(dT[1], time), time - time[1])

start = request.security(syminfo.tickerid, dintval, time, lookahead = barmerge.lookahead_on)
newSession = ta.change(start) ? 1 : 0
sinceNew = nz(ta.barssince(newSession), bar)

// auto detect renko

renkoBlock = math.abs(open - close)
renkoBlock := bar > 1 ? math.abs(open - close) == renkoBlock[1] and (close == high or close == low) ? renkoBlock[1] : -1 : math.abs(open - close) > 0 and (close == high or close == low) ? math.abs(open - close) : -1
isRenko = renkoBlock >= 0

isChartIntval = isRenko or (sinceNew == 0 and sinceNew[1] == 0 and sinceNew[2] == 0)

// eTF: We use this variable (end time frame) to update a MTF indicator 
// only on the last candle of the desired interval. Example for 60 
// math.minute 'dintval' but on a 5-math.minute chart interval:

// 0:55, 1:55, 2:55, 3:55, 4:55, 5:55, etc. 

// These are the last candles in the 60 math.minute interval.

eTF = isChartIntval or (time + dT) == time_close(dintval)

// STYLE

var lineStyle = line.style_solid

var labelSize = textSize == "Tiny" ? size.tiny : textSize == "Small" ? size.small : textSize == "Normal" ? size.normal : textSize == "Large" ? size.large : size.huge

o_ = open
o_ := newSession ? open : nz(o_[1], open)

l_ = low
l_ := newSession ? low : math.min(low, nz(l_[1], low))

h_ = high
h_ := newSession ? high : math.max(high, nz(h_[1], high))

haClose = (o_ + h_ + l_ + close) / 4

haOpen = open
haOpen := newSession ? (nz(haOpen[1]) + nz(haClose[1])) / 2 : nz(haOpen[1]) 

haHigh = math.max(h_, math.max(haOpen, haClose))
haLow = math.min(l_, math.min(haOpen, haClose))

o = candleType == "Candlestick" or hybrid ? o_ : haOpen
h = candleType == "Candlestick" or hybrid ? h_ : haHigh
l = candleType == "Candlestick" or hybrid ? l_ : haLow
c = candleType == "Candlestick" or hybrid ? close : haClose

isBullishCandle = (not hybrid and c > o) or (hybrid and haClose > haOpen) // for coloring purposes only
isBearishCandle = (not hybrid and c < o) or (hybrid and haClose < haOpen) // for coloring purposes only
isDojiCandle = (not hybrid and c == o) or (hybrid and haClose == haOpen)

gaps = 0
gaps := newSession ? 0 : time - time[1] > dT ? nz(gaps[1]) + math.ceil((time - time[1]) / dT) - 1 : nz(gaps[1])

var volumeP = array.new_float()

var vol = volume
vol := newSession ? volume : nz(vol[1]) + volume

typical = (2 * open + high + low) / 4

var upVol = volume
upVol := newSession ? close > typical ? volume : 0.0001 : nz(upVol[1]) + (close > typical ? volume : 0)

var dnVol = volume
dnVol := newSession ? close < typical ? volume : 0.0001 : nz(dnVol[1]) + (close < typical ? volume : 0)

buyVol = upVol / (upVol + dnVol) * 100
sellVol = 100 - buyVol

var count = 0
count := newSession ? 0 : nz(count[1]) + 1

var missingArray = array.new_float(1)
var barsRemainingArray = array.new_float(1)

if newSession
    array.unshift(volumeP, vol[1])
    
    if array.size(volumeP) > volLookback
        array.pop(volumeP)

getCandle() =>
    var box body = na
    var line wickL = na
    var line wickH = na
    var int x1 = 0
    var int x2 = 0
    var barsRemaining = 0
    
    var label meta = na
        
    if not isChartIntval and not countdownOnly
        col = isBullishCandle ? upColor : isBearishCandle ? dnColor : wickColor
        wickC = isBullishCandle ? wickColorUp : isBearishCandle ? wickColorDn : wickColor
        
        if newSession
            x1 := time
            x2 := time_close(dintval) - dT
            
            mid = math.floor((time + x2) / (2 * dT)) * dT
            
            body := box.new(x1, math.max(o, c), x2, math.min(o, c), border_width = candleWidth, border_style = lineStyle, xloc = xloc.bar_time)
                
            if showWick
                wickL := line.new(mid, o, mid, l, xloc = xloc.bar_time, color = wickC, style = lineStyle, width = wickWidth)
                wickH := line.new(mid, c, mid, h, xloc = xloc.bar_time, color = wickC, style = lineStyle, width = wickWidth)
                
            if shadeVolume
                meta := label.new(mid, (o + c) / 2, xloc = xloc.bar_time, text = "[   ]", color = #00000000, textcolor = #00000000, size = showRankLabels ? labelSize : size.large, style = label.style_label_center)
        
            diff = (x2 + dT - timenow) / 1000
            barsRemaining := int(math.floor(diff)) / timeframe.multiplier
            
            array.set(barsRemainingArray, 0, barsRemaining)
            
        else if timeframe.isseconds and barstate.isrealtime
            // count + diff / timeframe.multiplier = barsRemaining
            diff = (x2 + dT - timenow) / 1000
            
            missing = barsRemaining - count - int(diff / timeframe.multiplier)
            array.set(missingArray, 0, missing)
            
            // if missing > 0
            //     box.set_right(body, x2 - missing * dT) // TODO trying to resolve a bug for lower timeframes, asking TV developers
            
        box.set_top(body, math.max(o, c))
        box.set_bottom(body, math.min(o, c))
        box.set_border_color(body, col)
        
        if shadeVolume
            avgVol = array.avg(volumeP)
            stdev = array.stdev(volumeP)
            
            lowerV = avgVol - 0.5 * stdev
            upperV = avgVol + sigma * stdev // 1 stdev accounts for 68% of normally distributed data, 2 stdev accounts for 95%, 3 stdev accounts for 99.7%
            
            totSigma = (vol - avgVol) / stdev
            
            distVolType = upVol >= dnVol ? buyVol : sellVol
            
            rank = if rankMode == "Percentile"
                r = math.max(0, math.min(1, (vol - lowerV) / (upperV - lowerV))) * 100 // spectrum normalized in standard deviations
            else
                r = (distVolType - 50) * 2
                
            bCol = if rankMode == "Percentile"
                col = color.new(isBullishCandle ? topFillUp : topFillDn, 100 - math.pow(rank / 100, 1.75) * 100) // the opacity of the candle approaches 100% as a power function, as oppossed to a linear gradient between transparent and opaque. The candle becomes fully opaque "slower" as the rank approaches 100
            else
                col = color.new(upVol >= dnVol ? topFillUp : topFillDn, 100 - math.pow(math.min(rank, 75) / 75, 1.75) * 100) // it is "hard" to reach a 75 rank (or 87.5% buy/sell volume) for a single candle. 100 rank, or 100% buy volume, is near impossible. Cut the ceiling to 75
                
            box.set_bgcolor(body, bCol)
            
            modRank = rankMode == "Percentile" ? rank : distVolType
            
            label.set_y(meta, (o + c) / 2)    
            label.set_tooltip(meta, "Open = " + str.tostring(o, format.mintick) + "\nHigh = " + str.tostring(h, format.mintick) + "\nLow = " + str.tostring(l, format.mintick) + "\nClose = " + str.tostring(c, format.mintick) + "\nVolume = " + str.tostring(vol) + "\n\n" + (rankMode == "Percentile" ? "Percentile Rank = " : "% " + (upVol >= dnVol ? "Buy" : "Sell") + " Volume = ") + str.tostring(modRank, "0.00") + "%" + (rankMode == "Percentile" ? "\nσ = " + str.tostring(totSigma, "0.00") : ""))
            
            if showRankLabels
                offsetColor = if rankMode == "Percentile"
                    col = color.from_gradient(rank, 50, 100, isBullishCandle ? topFillUp : topFillDn, isBullishCandle ? secondColorUp : secondColorDn) // need to make a gradient offset here because the text color will start to blend in with the candle color
                else
                    col = color.from_gradient(math.min(rank, 75), 20, 75, upVol >= dnVol ? topFillUp : topFillDn, upVol >= dnVol ? secondColorUp : secondColorDn) // rank 75 is buy/sell volume % of 87.5% which is very difficult to achieve on a single candle
                    
                label.set_text(meta, str.tostring(modRank, "#"))
                
                textCol = if rankMode == "Percentile"
                    col = isDojiCandle ? wickColor : rank < 50 ? isBullishCandle ? topFillUp : topFillDn : offsetColor
                else
                    col = upVol == dnVol ? wickColor : rank < 20 ? upVol >= dnVol ? topFillUp : topFillDn : offsetColor 
                    
                transp = if rankMode == "Percentile"
                    t = 100 - math.pow(rank / 100, 1.25) * 100 // similar to the background transparency power function, but this approaches fully opaque slightly "faster"
                else
                    t = 100 - math.pow(math.min(rank, 75) / 75, 1.25) * 100
                
                label.set_textcolor(meta, not minimalText ? textCol : color.new(textCol, transp)) // make the transparency follow a non-linear power curve. As the rank becomes closer to 100, the transparency goes to zero (fully opaque). 0 rank is fully transparent.
            
        else
            bCol = isBullishCandle ? fillColorUp : isBearishCandle ? fillColorDn : wickColor
            box.set_bgcolor(body, bCol)
        
        if showWick
            line.set_y1(wickL, c > o ? o : c)
            line.set_y2(wickL, l)
            line.set_color(wickL, wickC)
            
            line.set_y1(wickH, c > o ? c : o)
            line.set_y2(wickH, h)
            line.set_color(wickH, wickC)
    
// live candles

getCandle()
        
var label countdown = na
var barsInInt = array.new_int() 

if newSession
    b1 = time
    b2 = ta.valuewhen(newSession, time, 1)
    b3 = ta.valuewhen(newSession, time, 2)
    
    if (b1 - b2) == (b2 - b3)
        array.push(barsInInt, b1 - b2)

if showCountdown and (barstate.isrealtime or barstate.islastconfirmedhistory)
    x = time_close(dintval) - dT
    col = isBullishCandle ? color.new(upColor, 0) : isBearishCandle ?  color.new(dnColor, 0) :  color.new(wickColor, 0)
    x1 = x + countdownOffset * math.ceil(array.avg(barsInInt))
    
    if na(countdown)
        countdown := label.new(x1, c, "", xloc = xloc.bar_time, color = #00000000, size = size.large, style = label.style_label_left, textalign = text.align_right)
        
    if newSession
        label.set_x(countdown, x1)
        
    label.set_y(countdown, c)
    label.set_textcolor(countdown, col)
    
    diff = (x + dT - timenow) / 1000
    cdText = array.new_string()
    
    if diff > 2628000 // seconds in one month
        months = int(math.floor(diff / 2628000))
        
        array.push(cdText, (months < 10 ? "0" : "") + str.tostring(months))
        diff := diff - months * 2628000
            
    if diff > 86400 // seconds in one day
        days = int(math.floor(diff / 86400))
        
        array.push(cdText, (days < 10 ? "0" : "") + str.tostring(days))
        diff := diff - days * 86400
        
    if diff > 3600 // seconds in one hour
        hours = int(math.floor(diff / 3600))
        
        array.push(cdText, (hours < 10 ? "0" : "") + str.tostring(hours))
        diff := diff - hours * 3600
            
    if diff > 60 // seconds in one minute
        minutes = int(math.floor(diff / 60))
        
        array.push(cdText, (minutes < 10 ? "0" : "") + str.tostring(minutes))
        diff := diff - minutes * 60
    
    else if array.size(cdText) == 0
        array.push(cdText, "00") // always show minutes even if zero minutes remain
        
    if diff > 0
        seconds = int(math.floor(diff))
        array.push(cdText, (seconds < 10 ? "0" : "") + str.tostring(seconds))
    
    label.set_text(countdown, array.join(cdText, ":")) 
    
// plot(array.get(missingArray, 0), color = color.yellow)
// plot(array.get(barsRemainingArray, 0), color = color.orange)
// plot(count, color = color.green)
